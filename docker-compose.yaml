services:
  vpn:
    image: linuxserver/wireguard:latest
    hostname: vpn
    container_name: vpn
    restart: always
    depends_on:
      - api
    environment:
      - PEERS=${PEERS}
      - ALLOWEDIPS=10.100.0.0/15
      - SERVERURL=${SERVER_URL}
      - SERVERPORT=${VPN_PORT}
      - PEERDNS=${VPN_DNS}
      - TICK_SECONDS=${TICK_SECONDS}
      - START_TIME_PATH=${START_TIME_PATH}
    cap_add:
      - NET_ADMIN
    volumes:
      - ./.docker/vpn:/config
      - ./pcaps:/pcaps
    ports:
      - "${VPN_PORT}:51820/udp"
    networks:
      game:
        ipv4_address: 10.101.0.1
      checker:
        ipv4_address: 10.103.1.1

  api:
    build:
      context: ./.docker/api
      dockerfile: Dockerfile
    hostname: api
    container_name: api
    restart: always
    depends_on:
      - db
      - ticker
    environment:
      - FLAG_LIFETIME=${FLAG_LIFETIME}
      - API_KEY=${API_KEY}
      - TEAM_COUNT=${TEAM_COUNT}
      - PEERS=${PEERS}
      - SERVICES=${CHECKERS}
      - TEAM_TOKENS=${TEAM_TOKENS}
      - START_TIME=${START_TIME}
    volumes:
      - ./.docker/api/src:/code
      - ./.docker/vpn:/vpn
      - ./.docker/api/teamdata:/teamdata
    ports:
      - "${API_PORT}:80"
    networks:
      game:
        ipv4_address: 10.101.0.2
      infra:
        ipv4_address: 10.102.0.2

  registry:
    image: registry:latest
    hostname: registry
    container_name: registry
    restart: always
    volumes:
      - ./.docker/registry/cache:/cache
      - ./.docker/registry/config.yml:/etc/docker/registry/config.yml
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /cache
    networks:
      game:
        ipv4_address: 10.101.0.3
      checker:
        ipv4_address: 10.103.1.3

  rangemaster:
    build:
      context: ./.docker/rangemaster
      dockerfile: Dockerfile
    hostname: rangemaster
    container_name: rangemaster
    restart: always
    networks:
      game:
        ipv4_address: 10.101.0.5
      infra:
        ipv4_address: 10.102.1.5
      checker:
        ipv4_address: 10.103.1.5

  ticker:
    build:
      context: ./.docker/ticker
      dockerfile: Dockerfile
    hostname: ticker
    container_name: ticker
    restart: always
    environment:
      - SERVICES=${SERVICES}
      - CHECKERS=${CHECKERS}
      - TEAM_COUNT=${TEAM_COUNT}
      - TICK_SECONDS=${TICK_SECONDS}
      - START_TIME=${START_TIME}
      - END_TIME=${END_TIME}
    volumes:
      - ./.docker/ticker/src:/code
    networks:
      infra:
        ipv4_address: 10.102.0.4
      checker:
        ipv4_address: 10.103.1.4

  frontend:
    build:
      context: ./.docker/frontend
      dockerfile: Dockerfile
    hostname: frontend
    container_name: frontend
    restart: always
    environment:
      - SERVER_URL=${SERVER_URL}
      - API_PORT=${API_PORT}
    volumes:
      - ./.docker/frontend/src:/app
    ports:
      - "${FRONTEND_PORT}:80"
    networks:
      game:
        ipv4_address: 10.101.0.6
      infra:
        ipv4_address: 10.102.0.6

  db:
    image: mongo:latest
    hostname: db
    container_name: db
    restart: always
    volumes:
      - db:/data/db
    networks:
      infra:
        ipv4_address: 10.102.0.3

volumes:
  db:

networks:
  game:
    driver: bridge
    ipam:
      config:
        - subnet: 10.100.0.0/15
  infra:
    driver: bridge
    ipam:
      config:
        - subnet: 10.102.0.0/16
  checker:
    driver: bridge
    ipam:
      config:
        - subnet: 10.103.0.0/16
